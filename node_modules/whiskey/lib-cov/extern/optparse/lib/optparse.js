/* automatically generated by JSCoverage - do not edit */
if (typeof _$jscoverage === 'undefined') _$jscoverage = {};
if (! _$jscoverage['extern/optparse/lib/optparse.js']) {
  _$jscoverage['extern/optparse/lib/optparse.js'] = [];
  _$jscoverage['extern/optparse/lib/optparse.js'][7] = 0;
  _$jscoverage['extern/optparse/lib/optparse.js'][8] = 0;
  _$jscoverage['extern/optparse/lib/optparse.js'][9] = 0;
  _$jscoverage['extern/optparse/lib/optparse.js'][10] = 0;
  _$jscoverage['extern/optparse/lib/optparse.js'][11] = 0;
  _$jscoverage['extern/optparse/lib/optparse.js'][12] = 0;
  _$jscoverage['extern/optparse/lib/optparse.js'][13] = 0;
  _$jscoverage['extern/optparse/lib/optparse.js'][14] = 0;
  _$jscoverage['extern/optparse/lib/optparse.js'][15] = 0;
  _$jscoverage['extern/optparse/lib/optparse.js'][16] = 0;
  _$jscoverage['extern/optparse/lib/optparse.js'][17] = 0;
  _$jscoverage['extern/optparse/lib/optparse.js'][21] = 0;
  _$jscoverage['extern/optparse/lib/optparse.js'][22] = 0;
  _$jscoverage['extern/optparse/lib/optparse.js'][25] = 0;
  _$jscoverage['extern/optparse/lib/optparse.js'][26] = 0;
  _$jscoverage['extern/optparse/lib/optparse.js'][32] = 0;
  _$jscoverage['extern/optparse/lib/optparse.js'][33] = 0;
  _$jscoverage['extern/optparse/lib/optparse.js'][34] = 0;
  _$jscoverage['extern/optparse/lib/optparse.js'][35] = 0;
  _$jscoverage['extern/optparse/lib/optparse.js'][37] = 0;
  _$jscoverage['extern/optparse/lib/optparse.js'][41] = 0;
  _$jscoverage['extern/optparse/lib/optparse.js'][43] = 0;
  _$jscoverage['extern/optparse/lib/optparse.js'][48] = 0;
  _$jscoverage['extern/optparse/lib/optparse.js'][49] = 0;
  _$jscoverage['extern/optparse/lib/optparse.js'][50] = 0;
  _$jscoverage['extern/optparse/lib/optparse.js'][51] = 0;
  _$jscoverage['extern/optparse/lib/optparse.js'][52] = 0;
  _$jscoverage['extern/optparse/lib/optparse.js'][56] = 0;
  _$jscoverage['extern/optparse/lib/optparse.js'][57] = 0;
  _$jscoverage['extern/optparse/lib/optparse.js'][58] = 0;
  _$jscoverage['extern/optparse/lib/optparse.js'][59] = 0;
  _$jscoverage['extern/optparse/lib/optparse.js'][65] = 0;
  _$jscoverage['extern/optparse/lib/optparse.js'][66] = 0;
  _$jscoverage['extern/optparse/lib/optparse.js'][67] = 0;
  _$jscoverage['extern/optparse/lib/optparse.js'][68] = 0;
  _$jscoverage['extern/optparse/lib/optparse.js'][69] = 0;
  _$jscoverage['extern/optparse/lib/optparse.js'][73] = 0;
  _$jscoverage['extern/optparse/lib/optparse.js'][74] = 0;
  _$jscoverage['extern/optparse/lib/optparse.js'][75] = 0;
  _$jscoverage['extern/optparse/lib/optparse.js'][76] = 0;
  _$jscoverage['extern/optparse/lib/optparse.js'][77] = 0;
  _$jscoverage['extern/optparse/lib/optparse.js'][78] = 0;
  _$jscoverage['extern/optparse/lib/optparse.js'][80] = 0;
  _$jscoverage['extern/optparse/lib/optparse.js'][81] = 0;
  _$jscoverage['extern/optparse/lib/optparse.js'][83] = 0;
  _$jscoverage['extern/optparse/lib/optparse.js'][84] = 0;
  _$jscoverage['extern/optparse/lib/optparse.js'][85] = 0;
  _$jscoverage['extern/optparse/lib/optparse.js'][86] = 0;
  _$jscoverage['extern/optparse/lib/optparse.js'][87] = 0;
  _$jscoverage['extern/optparse/lib/optparse.js'][89] = 0;
  _$jscoverage['extern/optparse/lib/optparse.js'][90] = 0;
  _$jscoverage['extern/optparse/lib/optparse.js'][93] = 0;
  _$jscoverage['extern/optparse/lib/optparse.js'][95] = 0;
  _$jscoverage['extern/optparse/lib/optparse.js'][97] = 0;
  _$jscoverage['extern/optparse/lib/optparse.js'][113] = 0;
  _$jscoverage['extern/optparse/lib/optparse.js'][114] = 0;
  _$jscoverage['extern/optparse/lib/optparse.js'][115] = 0;
  _$jscoverage['extern/optparse/lib/optparse.js'][116] = 0;
  _$jscoverage['extern/optparse/lib/optparse.js'][117] = 0;
  _$jscoverage['extern/optparse/lib/optparse.js'][118] = 0;
  _$jscoverage['extern/optparse/lib/optparse.js'][121] = 0;
  _$jscoverage['extern/optparse/lib/optparse.js'][122] = 0;
  _$jscoverage['extern/optparse/lib/optparse.js'][123] = 0;
  _$jscoverage['extern/optparse/lib/optparse.js'][124] = 0;
  _$jscoverage['extern/optparse/lib/optparse.js'][125] = 0;
  _$jscoverage['extern/optparse/lib/optparse.js'][127] = 0;
  _$jscoverage['extern/optparse/lib/optparse.js'][141] = 0;
  _$jscoverage['extern/optparse/lib/optparse.js'][142] = 0;
  _$jscoverage['extern/optparse/lib/optparse.js'][143] = 0;
  _$jscoverage['extern/optparse/lib/optparse.js'][144] = 0;
  _$jscoverage['extern/optparse/lib/optparse.js'][145] = 0;
  _$jscoverage['extern/optparse/lib/optparse.js'][149] = 0;
  _$jscoverage['extern/optparse/lib/optparse.js'][150] = 0;
  _$jscoverage['extern/optparse/lib/optparse.js'][151] = 0;
  _$jscoverage['extern/optparse/lib/optparse.js'][152] = 0;
  _$jscoverage['extern/optparse/lib/optparse.js'][154] = 0;
  _$jscoverage['extern/optparse/lib/optparse.js'][158] = 0;
  _$jscoverage['extern/optparse/lib/optparse.js'][159] = 0;
  _$jscoverage['extern/optparse/lib/optparse.js'][160] = 0;
  _$jscoverage['extern/optparse/lib/optparse.js'][161] = 0;
  _$jscoverage['extern/optparse/lib/optparse.js'][163] = 0;
  _$jscoverage['extern/optparse/lib/optparse.js'][164] = 0;
  _$jscoverage['extern/optparse/lib/optparse.js'][165] = 0;
  _$jscoverage['extern/optparse/lib/optparse.js'][167] = 0;
  _$jscoverage['extern/optparse/lib/optparse.js'][168] = 0;
  _$jscoverage['extern/optparse/lib/optparse.js'][174] = 0;
  _$jscoverage['extern/optparse/lib/optparse.js'][175] = 0;
  _$jscoverage['extern/optparse/lib/optparse.js'][179] = 0;
  _$jscoverage['extern/optparse/lib/optparse.js'][180] = 0;
  _$jscoverage['extern/optparse/lib/optparse.js'][181] = 0;
  _$jscoverage['extern/optparse/lib/optparse.js'][182] = 0;
  _$jscoverage['extern/optparse/lib/optparse.js'][183] = 0;
  _$jscoverage['extern/optparse/lib/optparse.js'][188] = 0;
  _$jscoverage['extern/optparse/lib/optparse.js'][189] = 0;
  _$jscoverage['extern/optparse/lib/optparse.js'][190] = 0;
  _$jscoverage['extern/optparse/lib/optparse.js'][191] = 0;
  _$jscoverage['extern/optparse/lib/optparse.js'][192] = 0;
  _$jscoverage['extern/optparse/lib/optparse.js'][193] = 0;
  _$jscoverage['extern/optparse/lib/optparse.js'][194] = 0;
  _$jscoverage['extern/optparse/lib/optparse.js'][195] = 0;
  _$jscoverage['extern/optparse/lib/optparse.js'][196] = 0;
  _$jscoverage['extern/optparse/lib/optparse.js'][197] = 0;
  _$jscoverage['extern/optparse/lib/optparse.js'][200] = 0;
  _$jscoverage['extern/optparse/lib/optparse.js'][204] = 0;
  _$jscoverage['extern/optparse/lib/optparse.js'][205] = 0;
  _$jscoverage['extern/optparse/lib/optparse.js'][206] = 0;
  _$jscoverage['extern/optparse/lib/optparse.js'][207] = 0;
  _$jscoverage['extern/optparse/lib/optparse.js'][209] = 0;
  _$jscoverage['extern/optparse/lib/optparse.js'][218] = 0;
  _$jscoverage['extern/optparse/lib/optparse.js'][223] = 0;
  _$jscoverage['extern/optparse/lib/optparse.js'][224] = 0;
  _$jscoverage['extern/optparse/lib/optparse.js'][225] = 0;
  _$jscoverage['extern/optparse/lib/optparse.js'][226] = 0;
  _$jscoverage['extern/optparse/lib/optparse.js'][227] = 0;
  _$jscoverage['extern/optparse/lib/optparse.js'][228] = 0;
  _$jscoverage['extern/optparse/lib/optparse.js'][232] = 0;
  _$jscoverage['extern/optparse/lib/optparse.js'][233] = 0;
  _$jscoverage['extern/optparse/lib/optparse.js'][234] = 0;
  _$jscoverage['extern/optparse/lib/optparse.js'][235] = 0;
  _$jscoverage['extern/optparse/lib/optparse.js'][236] = 0;
  _$jscoverage['extern/optparse/lib/optparse.js'][237] = 0;
  _$jscoverage['extern/optparse/lib/optparse.js'][238] = 0;
  _$jscoverage['extern/optparse/lib/optparse.js'][239] = 0;
  _$jscoverage['extern/optparse/lib/optparse.js'][241] = 0;
  _$jscoverage['extern/optparse/lib/optparse.js'][243] = 0;
  _$jscoverage['extern/optparse/lib/optparse.js'][244] = 0;
  _$jscoverage['extern/optparse/lib/optparse.js'][246] = 0;
  _$jscoverage['extern/optparse/lib/optparse.js'][249] = 0;
  _$jscoverage['extern/optparse/lib/optparse.js'][250] = 0;
  _$jscoverage['extern/optparse/lib/optparse.js'][251] = 0;
  _$jscoverage['extern/optparse/lib/optparse.js'][252] = 0;
  _$jscoverage['extern/optparse/lib/optparse.js'][255] = 0;
  _$jscoverage['extern/optparse/lib/optparse.js'][259] = 0;
  _$jscoverage['extern/optparse/lib/optparse.js'][260] = 0;
  _$jscoverage['extern/optparse/lib/optparse.js'][261] = 0;
  _$jscoverage['extern/optparse/lib/optparse.js'][264] = 0;
  _$jscoverage['extern/optparse/lib/optparse.js'][269] = 0;
  _$jscoverage['extern/optparse/lib/optparse.js'][276] = 0;
  _$jscoverage['extern/optparse/lib/optparse.js'][277] = 0;
  _$jscoverage['extern/optparse/lib/optparse.js'][282] = 0;
  _$jscoverage['extern/optparse/lib/optparse.js'][284] = 0;
  _$jscoverage['extern/optparse/lib/optparse.js'][285] = 0;
  _$jscoverage['extern/optparse/lib/optparse.js'][286] = 0;
  _$jscoverage['extern/optparse/lib/optparse.js'][288] = 0;
  _$jscoverage['extern/optparse/lib/optparse.js'][289] = 0;
  _$jscoverage['extern/optparse/lib/optparse.js'][291] = 0;
  _$jscoverage['extern/optparse/lib/optparse.js'][292] = 0;
  _$jscoverage['extern/optparse/lib/optparse.js'][293] = 0;
  _$jscoverage['extern/optparse/lib/optparse.js'][294] = 0;
  _$jscoverage['extern/optparse/lib/optparse.js'][295] = 0;
  _$jscoverage['extern/optparse/lib/optparse.js'][296] = 0;
  _$jscoverage['extern/optparse/lib/optparse.js'][298] = 0;
  _$jscoverage['extern/optparse/lib/optparse.js'][299] = 0;
  _$jscoverage['extern/optparse/lib/optparse.js'][300] = 0;
  _$jscoverage['extern/optparse/lib/optparse.js'][302] = 0;
  _$jscoverage['extern/optparse/lib/optparse.js'][306] = 0;
  _$jscoverage['extern/optparse/lib/optparse.js'][307] = 0;
}
_$jscoverage['extern/optparse/lib/optparse.js'][7]++;
var optparse = {};
_$jscoverage['extern/optparse/lib/optparse.js'][8]++;
try {
  _$jscoverage['extern/optparse/lib/optparse.js'][8]++;
  optparse = exports;
}
catch (e) {
}
_$jscoverage['extern/optparse/lib/optparse.js'][8]++;
;
_$jscoverage['extern/optparse/lib/optparse.js'][9]++;
(function (self) {
  _$jscoverage['extern/optparse/lib/optparse.js'][10]++;
  var VERSION = "1.0.2";
  _$jscoverage['extern/optparse/lib/optparse.js'][11]++;
  var LONG_SWITCH_RE = /^--\w/;
  _$jscoverage['extern/optparse/lib/optparse.js'][12]++;
  var SHORT_SWITCH_RE = /^-\w/;
  _$jscoverage['extern/optparse/lib/optparse.js'][13]++;
  var NUMBER_RE = /^(0x[A-Fa-f0-9]+)|([0-9]+\.[0-9]+)|(\d+)$/;
  _$jscoverage['extern/optparse/lib/optparse.js'][14]++;
  var DATE_RE = /^\d{4}-(0[0-9]|1[0,1,2])-([0,1,2][0-9]|3[0,1])$/;
  _$jscoverage['extern/optparse/lib/optparse.js'][15]++;
  var EMAIL_RE = /^([0-9a-zA-Z]+([_.-]?[0-9a-zA-Z]+)*@[0-9a-zA-Z]+[0-9,a-z,A-Z,.,-]*(.){1}[a-zA-Z]{2,4})+$/;
  _$jscoverage['extern/optparse/lib/optparse.js'][16]++;
  var EXT_RULE_RE = /(\-\-[\w_-]+)\s+([\w\[\]_-]+)|(\-\-[\w_-]+)/;
  _$jscoverage['extern/optparse/lib/optparse.js'][17]++;
  var ARG_OPTIONAL_RE = /\[(.+)\]/;
  _$jscoverage['extern/optparse/lib/optparse.js'][21]++;
  var DEFAULT_FILTER = "_DEFAULT";
  _$jscoverage['extern/optparse/lib/optparse.js'][22]++;
  var PREDEFINED_FILTERS = {};
  _$jscoverage['extern/optparse/lib/optparse.js'][25]++;
  function filter_text(value) {
    _$jscoverage['extern/optparse/lib/optparse.js'][26]++;
    return value;
}
  _$jscoverage['extern/optparse/lib/optparse.js'][32]++;
  function filter_number(value) {
    _$jscoverage['extern/optparse/lib/optparse.js'][33]++;
    var m = value.match(NUMBER_RE);
    _$jscoverage['extern/optparse/lib/optparse.js'][34]++;
    if (m == null) {
      _$jscoverage['extern/optparse/lib/optparse.js'][34]++;
      throw OptError("Expected a number representative");
    }
    _$jscoverage['extern/optparse/lib/optparse.js'][35]++;
    if (m[1]) {
      _$jscoverage['extern/optparse/lib/optparse.js'][37]++;
      return parseInt(m[1], 16);
    }
    else {
      _$jscoverage['extern/optparse/lib/optparse.js'][41]++;
      return parseFloat(m[2] || m[3]);
    }
}
  _$jscoverage['extern/optparse/lib/optparse.js'][43]++;
  ;
  _$jscoverage['extern/optparse/lib/optparse.js'][48]++;
  function filter_date(value) {
    _$jscoverage['extern/optparse/lib/optparse.js'][49]++;
    var m = value.match(DATE_RE);
    _$jscoverage['extern/optparse/lib/optparse.js'][50]++;
    if (m == null) {
      _$jscoverage['extern/optparse/lib/optparse.js'][50]++;
      throw OptError("Expected a date representation in the \"yyyy-mm-dd\" format.");
    }
    _$jscoverage['extern/optparse/lib/optparse.js'][51]++;
    return new Date(parseInt(m[0]), parseInt(m[1]), parseInt(m[2]));
}
  _$jscoverage['extern/optparse/lib/optparse.js'][52]++;
  ;
  _$jscoverage['extern/optparse/lib/optparse.js'][56]++;
  function filter_email(value) {
    _$jscoverage['extern/optparse/lib/optparse.js'][57]++;
    var m = value.match(EMAIL_RE);
    _$jscoverage['extern/optparse/lib/optparse.js'][58]++;
    if (m == null) {
      _$jscoverage['extern/optparse/lib/optparse.js'][58]++;
      throw OptError("Excpeted an email address.");
    }
    _$jscoverage['extern/optparse/lib/optparse.js'][59]++;
    return m[1];
}
  _$jscoverage['extern/optparse/lib/optparse.js'][65]++;
  PREDEFINED_FILTERS[DEFAULT_FILTER] = filter_text;
  _$jscoverage['extern/optparse/lib/optparse.js'][66]++;
  PREDEFINED_FILTERS.TEXT = filter_text;
  _$jscoverage['extern/optparse/lib/optparse.js'][67]++;
  PREDEFINED_FILTERS.NUMBER = filter_number;
  _$jscoverage['extern/optparse/lib/optparse.js'][68]++;
  PREDEFINED_FILTERS.DATE = filter_date;
  _$jscoverage['extern/optparse/lib/optparse.js'][69]++;
  PREDEFINED_FILTERS.EMAIL = filter_email;
  _$jscoverage['extern/optparse/lib/optparse.js'][73]++;
  function build_rules(filters, arr) {
    _$jscoverage['extern/optparse/lib/optparse.js'][74]++;
    var rules = [];
    _$jscoverage['extern/optparse/lib/optparse.js'][75]++;
    for (var i = 0; i < arr.length; i++) {
      _$jscoverage['extern/optparse/lib/optparse.js'][76]++;
      var r = arr[i], rule;
      _$jscoverage['extern/optparse/lib/optparse.js'][77]++;
      if (! contains_expr(r)) {
        _$jscoverage['extern/optparse/lib/optparse.js'][77]++;
        throw OptError("Rule MUST contain an option.");
      }
      _$jscoverage['extern/optparse/lib/optparse.js'][78]++;
      switch (r.length) {
      case 1:
        _$jscoverage['extern/optparse/lib/optparse.js'][80]++;
        rule = build_rule(filters, r[0]);
        _$jscoverage['extern/optparse/lib/optparse.js'][81]++;
        break;
      case 2:
        _$jscoverage['extern/optparse/lib/optparse.js'][83]++;
        var expr = r[0].match(LONG_SWITCH_RE)? 0: 1;
        _$jscoverage['extern/optparse/lib/optparse.js'][84]++;
        var alias = expr == 0? -1: 0;
        _$jscoverage['extern/optparse/lib/optparse.js'][85]++;
        var desc = alias == -1? 1: -1;
        _$jscoverage['extern/optparse/lib/optparse.js'][86]++;
        rule = build_rule(filters, r[alias], r[expr], r[desc]);
        _$jscoverage['extern/optparse/lib/optparse.js'][87]++;
        break;
      case 3:
        _$jscoverage['extern/optparse/lib/optparse.js'][89]++;
        rule = build_rule(filters, r[0], r[1], r[2]);
        _$jscoverage['extern/optparse/lib/optparse.js'][90]++;
        break;
      default:
      case 0:
        _$jscoverage['extern/optparse/lib/optparse.js'][93]++;
        continue;
      }
      _$jscoverage['extern/optparse/lib/optparse.js'][95]++;
      rules.push(rule);
}
    _$jscoverage['extern/optparse/lib/optparse.js'][97]++;
    return rules;
}
  _$jscoverage['extern/optparse/lib/optparse.js'][113]++;
  function build_rule(filters, short, expr, desc) {
    _$jscoverage['extern/optparse/lib/optparse.js'][114]++;
    var optional, filter;
    _$jscoverage['extern/optparse/lib/optparse.js'][115]++;
    var m = expr.match(EXT_RULE_RE);
    _$jscoverage['extern/optparse/lib/optparse.js'][116]++;
    if (m == null) {
      _$jscoverage['extern/optparse/lib/optparse.js'][116]++;
      throw OptError("The switch is not well-formed.");
    }
    _$jscoverage['extern/optparse/lib/optparse.js'][117]++;
    var long = m[1] || m[3];
    _$jscoverage['extern/optparse/lib/optparse.js'][118]++;
    if (m[2] != undefined) {
      _$jscoverage['extern/optparse/lib/optparse.js'][121]++;
      var optional_match = m[2].match(ARG_OPTIONAL_RE);
      _$jscoverage['extern/optparse/lib/optparse.js'][122]++;
      var filter_name = optional_match === null? m[2]: optional_match[1];
      _$jscoverage['extern/optparse/lib/optparse.js'][123]++;
      optional = optional_match !== null;
      _$jscoverage['extern/optparse/lib/optparse.js'][124]++;
      filter = filters[filter_name];
      _$jscoverage['extern/optparse/lib/optparse.js'][125]++;
      if (filter === undefined) {
        _$jscoverage['extern/optparse/lib/optparse.js'][125]++;
        filter = filters[DEFAULT_FILTER];
      }
    }
    _$jscoverage['extern/optparse/lib/optparse.js'][127]++;
    return ({name: long.substr(2), short: short, long: long, decl: expr, desc: desc, optional_arg: optional, filter: filter});
}
  _$jscoverage['extern/optparse/lib/optparse.js'][141]++;
  function contains_expr(arr) {
    _$jscoverage['extern/optparse/lib/optparse.js'][142]++;
    if (! arr || ! arr.length) {
      _$jscoverage['extern/optparse/lib/optparse.js'][142]++;
      return false;
    }
    _$jscoverage['extern/optparse/lib/optparse.js'][143]++;
    var l = arr.length;
    _$jscoverage['extern/optparse/lib/optparse.js'][144]++;
    while (l-- > 0) {
      _$jscoverage['extern/optparse/lib/optparse.js'][144]++;
      if (arr[l].match(LONG_SWITCH_RE)) {
        _$jscoverage['extern/optparse/lib/optparse.js'][144]++;
        return true;
      }
}
    _$jscoverage['extern/optparse/lib/optparse.js'][145]++;
    return false;
}
  _$jscoverage['extern/optparse/lib/optparse.js'][149]++;
  function extend(dest, src) {
    _$jscoverage['extern/optparse/lib/optparse.js'][150]++;
    var result = dest;
    _$jscoverage['extern/optparse/lib/optparse.js'][151]++;
    for (var n in src) {
      _$jscoverage['extern/optparse/lib/optparse.js'][152]++;
      result[n] = src[n];
}
    _$jscoverage['extern/optparse/lib/optparse.js'][154]++;
    return result;
}
  _$jscoverage['extern/optparse/lib/optparse.js'][158]++;
  function spaces(arg1, arg2) {
    _$jscoverage['extern/optparse/lib/optparse.js'][159]++;
    var l, builder = [];
    _$jscoverage['extern/optparse/lib/optparse.js'][160]++;
    if (arg1.constructor === Number) {
      _$jscoverage['extern/optparse/lib/optparse.js'][161]++;
      l = arg1;
    }
    else {
      _$jscoverage['extern/optparse/lib/optparse.js'][163]++;
      if (arg1.length == arg2) {
        _$jscoverage['extern/optparse/lib/optparse.js'][163]++;
        return arg1;
      }
      _$jscoverage['extern/optparse/lib/optparse.js'][164]++;
      l = arg2 - arg1.length;
      _$jscoverage['extern/optparse/lib/optparse.js'][165]++;
      builder.push(arg1);
    }
    _$jscoverage['extern/optparse/lib/optparse.js'][167]++;
    while (l-- > 0) {
      _$jscoverage['extern/optparse/lib/optparse.js'][167]++;
      builder.push(" ");
}
    _$jscoverage['extern/optparse/lib/optparse.js'][168]++;
    return builder.join("");
}
  _$jscoverage['extern/optparse/lib/optparse.js'][174]++;
  function Parser(rules) {
    _$jscoverage['extern/optparse/lib/optparse.js'][175]++;
    return new OptionParser(rules);
}
  _$jscoverage['extern/optparse/lib/optparse.js'][179]++;
  function OptError(msg) {
    _$jscoverage['extern/optparse/lib/optparse.js'][180]++;
    return new (function () {
  _$jscoverage['extern/optparse/lib/optparse.js'][181]++;
  this.msg = msg;
  _$jscoverage['extern/optparse/lib/optparse.js'][182]++;
  this.toString = (function () {
  _$jscoverage['extern/optparse/lib/optparse.js'][183]++;
  return this.msg;
});
})();
}
  _$jscoverage['extern/optparse/lib/optparse.js'][188]++;
  function OptionParser(rules) {
    _$jscoverage['extern/optparse/lib/optparse.js'][189]++;
    this.banner = "Usage: [Options]";
    _$jscoverage['extern/optparse/lib/optparse.js'][190]++;
    this.options_title = "Available options:";
    _$jscoverage['extern/optparse/lib/optparse.js'][191]++;
    this._rules = rules;
    _$jscoverage['extern/optparse/lib/optparse.js'][192]++;
    this._halt = false;
    _$jscoverage['extern/optparse/lib/optparse.js'][193]++;
    this.filters = extend({}, PREDEFINED_FILTERS);
    _$jscoverage['extern/optparse/lib/optparse.js'][194]++;
    this.on_args = {};
    _$jscoverage['extern/optparse/lib/optparse.js'][195]++;
    this.on_switches = {};
    _$jscoverage['extern/optparse/lib/optparse.js'][196]++;
    this.on_halt = (function () {
});
    _$jscoverage['extern/optparse/lib/optparse.js'][197]++;
    this.default_handler = (function () {
});
}
  _$jscoverage['extern/optparse/lib/optparse.js'][200]++;
  OptionParser.prototype = {on: (function (value, fn) {
  _$jscoverage['extern/optparse/lib/optparse.js'][204]++;
  if (value.constructor === Function) {
    _$jscoverage['extern/optparse/lib/optparse.js'][205]++;
    this.default_handler = value;
  }
  else {
    _$jscoverage['extern/optparse/lib/optparse.js'][206]++;
    if (value.constructor === Number) {
      _$jscoverage['extern/optparse/lib/optparse.js'][207]++;
      this.on_args[value] = fn;
    }
    else {
      _$jscoverage['extern/optparse/lib/optparse.js'][209]++;
      this.on_switches[value] = fn;
    }
  }
}), filter: (function (name, fn) {
  _$jscoverage['extern/optparse/lib/optparse.js'][218]++;
  this.filters[name.toUpperCase()] = fn;
}), parse: (function (args) {
  _$jscoverage['extern/optparse/lib/optparse.js'][223]++;
  var result = [], callback;
  _$jscoverage['extern/optparse/lib/optparse.js'][224]++;
  var rules = build_rules(this.filters, this._rules);
  _$jscoverage['extern/optparse/lib/optparse.js'][225]++;
  var tokens = args.concat([]);
  _$jscoverage['extern/optparse/lib/optparse.js'][226]++;
  while ((token = tokens.shift()) && this._halt == false) {
    _$jscoverage['extern/optparse/lib/optparse.js'][227]++;
    if (token.match(LONG_SWITCH_RE) || token.match(SHORT_SWITCH_RE)) {
      _$jscoverage['extern/optparse/lib/optparse.js'][228]++;
      var arg = undefined;
      _$jscoverage['extern/optparse/lib/optparse.js'][232]++;
      for (var i = 0; i < rules.length; i++) {
        _$jscoverage['extern/optparse/lib/optparse.js'][233]++;
        var rule = rules[i];
        _$jscoverage['extern/optparse/lib/optparse.js'][234]++;
        if (rule["long"] == token || rule["short"] == token) {
          _$jscoverage['extern/optparse/lib/optparse.js'][235]++;
          if (rule.filter !== undefined) {
            _$jscoverage['extern/optparse/lib/optparse.js'][236]++;
            arg = tokens.shift();
            _$jscoverage['extern/optparse/lib/optparse.js'][237]++;
            if (! arg.match(LONG_SWITCH_RE) && ! arg.match(SHORT_SWITCH_RE)) {
              _$jscoverage['extern/optparse/lib/optparse.js'][238]++;
              try {
                _$jscoverage['extern/optparse/lib/optparse.js'][239]++;
                arg = rule.filter(arg);
              }
              catch (e) {
                _$jscoverage['extern/optparse/lib/optparse.js'][241]++;
                throw OptError(token + ": " + e.toString());
              }
            }
            else {
              _$jscoverage['extern/optparse/lib/optparse.js'][243]++;
              if (rule.optional_arg) {
                _$jscoverage['extern/optparse/lib/optparse.js'][244]++;
                tokens.unshift(arg);
              }
              else {
                _$jscoverage['extern/optparse/lib/optparse.js'][246]++;
                throw OptError("Expected switch argument.");
              }
            }
          }
          _$jscoverage['extern/optparse/lib/optparse.js'][249]++;
          callback = this.on_switches[rule.name];
          _$jscoverage['extern/optparse/lib/optparse.js'][250]++;
          if (! callback) {
            _$jscoverage['extern/optparse/lib/optparse.js'][250]++;
            callback = this.on_switches["*"];
          }
          _$jscoverage['extern/optparse/lib/optparse.js'][251]++;
          if (callback) {
            _$jscoverage['extern/optparse/lib/optparse.js'][251]++;
            callback.apply(this, [rule.name, arg]);
          }
          _$jscoverage['extern/optparse/lib/optparse.js'][252]++;
          break;
        }
}
      _$jscoverage['extern/optparse/lib/optparse.js'][255]++;
      if (i == rules.length) {
        _$jscoverage['extern/optparse/lib/optparse.js'][255]++;
        this.default_handler.apply(this, [token]);
      }
    }
    else {
      _$jscoverage['extern/optparse/lib/optparse.js'][259]++;
      callback = this.on_args[result.length];
      _$jscoverage['extern/optparse/lib/optparse.js'][260]++;
      result.push(token);
      _$jscoverage['extern/optparse/lib/optparse.js'][261]++;
      if (callback) {
        _$jscoverage['extern/optparse/lib/optparse.js'][261]++;
        callback.apply(this, [token]);
      }
    }
}
  _$jscoverage['extern/optparse/lib/optparse.js'][264]++;
  return this._halt? this.on_halt.apply(this, []): result;
}), options: (function () {
  _$jscoverage['extern/optparse/lib/optparse.js'][269]++;
  return build_rules(this.filters, this._rules);
}), halt: (function (fn) {
  _$jscoverage['extern/optparse/lib/optparse.js'][276]++;
  this._halt = fn === undefined;
  _$jscoverage['extern/optparse/lib/optparse.js'][277]++;
  if (fn) {
    _$jscoverage['extern/optparse/lib/optparse.js'][277]++;
    this.on_halt = fn;
  }
}), toString: (function () {
  _$jscoverage['extern/optparse/lib/optparse.js'][282]++;
  var builder = [this.banner, "", this.options_title], shorts = false, longest = 0, rule;
  _$jscoverage['extern/optparse/lib/optparse.js'][284]++;
  var rules = build_rules(this.filters, this._rules);
  _$jscoverage['extern/optparse/lib/optparse.js'][285]++;
  for (var i = 0; i < rules.length; i++) {
    _$jscoverage['extern/optparse/lib/optparse.js'][286]++;
    rule = rules[i];
    _$jscoverage['extern/optparse/lib/optparse.js'][288]++;
    if (rule["short"]) {
      _$jscoverage['extern/optparse/lib/optparse.js'][288]++;
      shorts = true;
    }
    _$jscoverage['extern/optparse/lib/optparse.js'][289]++;
    if (rule.decl.length > longest) {
      _$jscoverage['extern/optparse/lib/optparse.js'][289]++;
      longest = rule.decl.length;
    }
}
  _$jscoverage['extern/optparse/lib/optparse.js'][291]++;
  for (var i = 0; i < rules.length; i++) {
    _$jscoverage['extern/optparse/lib/optparse.js'][292]++;
    var text;
    _$jscoverage['extern/optparse/lib/optparse.js'][293]++;
    rule = rules[i];
    _$jscoverage['extern/optparse/lib/optparse.js'][294]++;
    if (shorts) {
      _$jscoverage['extern/optparse/lib/optparse.js'][295]++;
      if (rule["short"]) {
        _$jscoverage['extern/optparse/lib/optparse.js'][295]++;
        text = spaces(2) + rule["short"] + ", ";
      }
      else {
        _$jscoverage['extern/optparse/lib/optparse.js'][296]++;
        text = spaces(6);
      }
    }
    _$jscoverage['extern/optparse/lib/optparse.js'][298]++;
    text += spaces(rule.decl, longest) + spaces(3);
    _$jscoverage['extern/optparse/lib/optparse.js'][299]++;
    text += rule.desc;
    _$jscoverage['extern/optparse/lib/optparse.js'][300]++;
    builder.push(text);
}
  _$jscoverage['extern/optparse/lib/optparse.js'][302]++;
  return builder.join("\n");
})};
  _$jscoverage['extern/optparse/lib/optparse.js'][306]++;
  self.VERSION = VERSION;
  _$jscoverage['extern/optparse/lib/optparse.js'][307]++;
  self.OptionParser = OptionParser;
})(optparse);
_$jscoverage['extern/optparse/lib/optparse.js'].source = ["//  Optparse.js 1.0.2 - Option Parser for Javascript ","// ","//  Copyright (c) 2009 Johan Dahlberg","// ","//  See README.md for license.","//                                                        ","var optparse = {};","try{ optparse = exports } catch(e) {}; // Try to export the lib for node.js","(function(self) {","var VERSION = '1.0.2';","var LONG_SWITCH_RE = /^--\\w/;","var SHORT_SWITCH_RE = /^-\\w/;","var NUMBER_RE = /^(0x[A-Fa-f0-9]+)|([0-9]+\\.[0-9]+)|(\\d+)$/;","var DATE_RE = /^\\d{4}-(0[0-9]|1[0,1,2])-([0,1,2][0-9]|3[0,1])$/;","var EMAIL_RE = /^([0-9a-zA-Z]+([_.-]?[0-9a-zA-Z]+)*@[0-9a-zA-Z]+[0-9,a-z,A-Z,.,-]*(.){1}[a-zA-Z]{2,4})+$/;","var EXT_RULE_RE = /(\\-\\-[\\w_-]+)\\s+([\\w\\[\\]_-]+)|(\\-\\-[\\w_-]+)/;","var ARG_OPTIONAL_RE = /\\[(.+)\\]/;","","// The default switch argument filter to use, when argument name doesnt match","// any other names. ","var DEFAULT_FILTER = '_DEFAULT';","var PREDEFINED_FILTERS = {};","","// The default switch argument filter. Parses the argument as text.","function filter_text(value) {","    return value;","}","","// Switch argument filter that expects an integer, HEX or a decimal value. An ","// exception is throwed if the criteria is not matched. ","// Valid input formats are: 0xFFFFFFF, 12345 and 1234.1234","function filter_number(value) {","    var m = value.match(NUMBER_RE);","    if(m == null) throw OptError('Expected a number representative');","    if(m[1]) {","        // The number is in HEX format. Convert into a number, then return it","        return parseInt(m[1], 16);","    } else {","        // The number is in regular- or decimal form. Just run in through ","        // the float caster.","        return parseFloat(m[2] || m[3]);","    }","};","","// Switch argument filter that expects a Date expression. The date string MUST be","// formated as: \"yyyy-mm-dd\" An exception is throwed if the criteria is not ","// matched. An DATE object is returned on success. ","function filter_date(value) {","    var m = value.match(DATE_RE);","    if(m == null) throw OptError('Expected a date representation in the \"yyyy-mm-dd\" format.');","    return new Date(parseInt(m[0]), parseInt(m[1]), parseInt(m[2]));","};","","// Switch argument filter that expects an email address. An exception is throwed","// if the criteria doesn`t match. ","function filter_email(value) {","    var m = value.match(EMAIL_RE);","    if(m == null) throw OptError('Excpeted an email address.');","    return m[1];","}","","// Register all predefined filters. This dict is used by each OptionParser ","// instance, when parsing arguments. Custom filters can be added to the parser ","// instance by calling the \"add_filter\" -method. ","PREDEFINED_FILTERS[DEFAULT_FILTER] = filter_text;","PREDEFINED_FILTERS['TEXT'] = filter_text;","PREDEFINED_FILTERS['NUMBER'] = filter_number;","PREDEFINED_FILTERS['DATE'] = filter_date;","PREDEFINED_FILTERS['EMAIL'] = filter_email;","","//  Buildes rules from a switches collection. The switches collection is defined","//  when constructing a new OptionParser object. ","function build_rules(filters, arr) {","    var rules = [];","    for(var i=0; i&lt;arr.length; i++) {","        var r = arr[i], rule","        if(!contains_expr(r)) throw OptError('Rule MUST contain an option.');","        switch(r.length) {","            case 1:","                rule = build_rule(filters, r[0]);","                break;","            case 2:","                var expr = r[0].match(LONG_SWITCH_RE) ? 0 : 1;","                var alias = expr == 0 ? -1 : 0;","                var desc = alias == -1 ? 1 : -1;","                rule = build_rule(filters, r[alias], r[expr], r[desc]);","                break;","            case 3:","                rule = build_rule(filters, r[0], r[1], r[2]);","                break;","            default:","            case 0:","                continue;","        }","        rules.push(rule)","    }","    return rules;","}","","//  Builds a rule with specified expression, short style switch and help. This ","//  function expects a dict with filters to work correctly. ","//","//  Return format:","//      name               The name of the switch.","//      short              The short style switch","//      long               The long style switch","//      decl               The declaration expression (the input expression)","//      desc               The optional help section for the switch","//      optional_arg       Indicates that switch argument is optional","//      filter             The filter to use when parsing the arg. An ","//                         &lt;&lt;undefined&gt;&gt; value means that the switch does ","//                         not take anargument.","function build_rule(filters, short, expr, desc) {","    var optional, filter;","    var m = expr.match(EXT_RULE_RE);","    if(m == null) throw OptError('The switch is not well-formed.');","    var long = m[1] || m[3];","    if(m[2] != undefined) {","        // A switch argument is expected. Check if the argument is optional,","        // then find a filter that suites.","        var optional_match = m[2].match(ARG_OPTIONAL_RE);","        var filter_name = optional_match === null ? m[2] : optional_match[1];","        optional = optional_match !== null;","        filter = filters[filter_name];","        if(filter === undefined) filter = filters[DEFAULT_FILTER];","    }","    return {","        name: long.substr(2),       ","        short: short,               ","        long: long,","        decl: expr,","        desc: desc,                 ","        optional_arg: optional,","        filter: filter              ","    }","}","","// Loop's trough all elements of an array and check if there is valid","// options expression within. An valid option is a token that starts ","// double dashes. E.G. --my_option","function contains_expr(arr) {","    if(!arr || !arr.length) return false;","    var l = arr.length;","    while(l-- &gt; 0) if(arr[l].match(LONG_SWITCH_RE)) return true;","    return false;","}","","// Extends destination object with members of source object","function extend(dest, src) {","    var result = dest;","    for(var n in src) {","        result[n] = src[n];","    }","    return result;","}","","// Appends spaces to match specified number of chars","function spaces(arg1, arg2) {","    var l, builder = [];","    if(arg1.constructor === Number) {","        l = arg1;  ","    } else {","        if(arg1.length == arg2) return arg1;","        l = arg2 - arg1.length;","        builder.push(arg1);","    }","    while(l-- &gt; 0) builder.push(' ');","    return builder.join('');","}","","//  Create a new Parser object that can be used to parse command line arguments.","//","//","function Parser(rules) {","    return new OptionParser(rules);","}","","// Creates an error object with specified error message.","function OptError(msg) {","    return new function() {","        this.msg = msg;","        this.toString = function() {","            return this.msg;","        }","    }","}","","function OptionParser(rules) {","    this.banner = 'Usage: [Options]';","    this.options_title = 'Available options:'","    this._rules = rules;","    this._halt = false;","    this.filters = extend({}, PREDEFINED_FILTERS);","    this.on_args = {};","    this.on_switches = {};","    this.on_halt = function() {};","    this.default_handler = function() {};","}","","OptionParser.prototype = {","    ","    // Adds args and switchs handler.","    on: function(value, fn) {","        if(value.constructor === Function ) {","            this.default_handler = value;","        } else if(value.constructor === Number) {","            this.on_args[value] = fn;","        } else {","            this.on_switches[value] = fn;","        }","    },","    ","    // Adds a custom filter to the parser. It's possible to override the","    // default filter by passing the value \"_DEFAULT\" to the &#194;&#180;&#194;&#180;name&#194;&#180;&#194;&#180;","    // argument. The name of the filter is automatically transformed into ","    // upper case. ","    filter: function(name, fn) {","        this.filters[name.toUpperCase()] = fn;","    },","    ","    // Parses specified args. Returns remaining arguments. ","    parse: function(args) {","        var result = [], callback;","        var rules = build_rules(this.filters, this._rules);","        var tokens = args.concat([]);","        while((token = tokens.shift()) &amp;&amp; this._halt == false) {","            if(token.match(LONG_SWITCH_RE) || token.match(SHORT_SWITCH_RE)) {","                var arg = undefined;","                // The token is a long or a short switch. Get the corresponding ","                // rule, filter and handle it. Pass the switch to the default ","                // handler if no rule matched.","                for(var i = 0; i &lt; rules.length; i++) {","                    var rule = rules[i];","                    if(rule.long == token || rule.short == token) {","                        if(rule.filter !== undefined) {","                            arg = tokens.shift();","                            if(!arg.match(LONG_SWITCH_RE) &amp;&amp; !arg.match(SHORT_SWITCH_RE)) {","                                try {","                                    arg = rule.filter(arg);","                                } catch(e) {","                                    throw OptError(token + ': ' + e.toString());","                                }","                            } else if(rule.optional_arg) {","                                tokens.unshift(arg);","                            } else {","                                throw OptError('Expected switch argument.');","                            }","                        } ","                        callback = this.on_switches[rule.name];","                        if (!callback) callback = this.on_switches['*'];","                        if(callback) callback.apply(this, [rule.name, arg]);","                        break;","                    } ","                }","                if(i == rules.length) this.default_handler.apply(this, [token]);","            } else {","                // Did not match long or short switch. Parse the token as a ","                // normal argument.","                callback = this.on_args[result.length];","                result.push(token);","                if(callback) callback.apply(this, [token]);","            }","        }","        return this._halt ? this.on_halt.apply(this, []) : result;","    },","    ","    // Returns an Array with all defined option rules ","    options: function() {","        return build_rules(this.filters, this._rules);","    },","","    // Add an on_halt callback if argument &#194;&#180;&#194;&#180;fn&#194;&#180;&#194;&#180; is specified. on_switch handlers can ","    // call instance.halt to abort the argument parsing. This can be useful when","    // displaying help or version information.","    halt: function(fn) {","        this._halt = fn === undefined","        if(fn) this.on_halt = fn;","    },","    ","    // Returns a string representation of this OptionParser instance.","    toString: function() {","        var builder = [this.banner, '', this.options_title], ","            shorts = false, longest = 0, rule;","        var rules = build_rules(this.filters, this._rules);","        for(var i = 0; i &lt; rules.length; i++) {","            rule = rules[i];","            // Quick-analyze the options. ","            if(rule.short) shorts = true;","            if(rule.decl.length &gt; longest) longest = rule.decl.length;","        }","        for(var i = 0; i &lt; rules.length; i++) {","            var text; ","            rule = rules[i];","            if(shorts) {","                if(rule.short) text = spaces(2) + rule.short + ', ';","                else text = spaces(6);","            }","            text += spaces(rule.decl, longest) + spaces(3);","            text += rule.desc;","            builder.push(text);","        }","        return builder.join('\\n');","    }","}","","self.VERSION = VERSION;","self.OptionParser = OptionParser;","","})(optparse);"];
